#include<stdio.h>
#include<stdlib.h>
struct Node{
    int data;
    struct Node* next;
};
struct Node* createnode(int data){
    struct Node* newnode=(struct Node*)malloc(sizeof(struct Node));
    newnode->data=data;
    newnode->next=NULL;
    return newnode;
}
void insertionatfirst(struct Node** head,int data){
    struct Node* newnode=createnode(data);
    newnode->next=*head;
    *head=newnode;
}
void insertionatend(struct Node** head,int data){
    struct Node* newnode=createnode(data);
    if(*head==NULL){
        *head=newnode;
        newnode->next=NULL;
        return;
    }
    struct Node* temp=*head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=newnode;
    newnode->next=NULL;
}
void insertionatposition(struct Node** head,int data,int position){
    struct Node* newnode=createnode(data);
    if(*head==NULL){
        printf("list is empty\n");
        return;
    }
    if(position==0){
        insertionatfirst(head,data);
        return;
    }
    struct Node* temp=*head;
    for(int i=0;temp!=NULL && i<position-1;i++){
        temp=temp->next;
    }
    if(temp->next==NULL){
        printf("out of range\n");
        return;
    }
    newnode->next=temp->next;
    temp->next=newnode;
}
void print(struct Node* head){
    struct Node* temp=head;
    while(temp!=NULL){
        printf("%d->",temp->data);
        temp=temp->next;
    }
    printf("NULL");
}
void deletionatfirst(struct Node**head){
    if(*head==NULL){
        printf("list is empty\n");
        return;
    }
    struct Node* temp=*head;
    *head=temp->next;
    free(temp);
}
void deletionatend(struct Node**head){
    if(*head==NULL){
        printf("list is empty\n");
        return;
    }
    struct Node* temp=*head;
    if(temp->next==NULL){
        free(temp);
        *head=NULL;
        return;
    }
    while(temp->next->next!=NULL){
        temp=temp->next;
    }
    free(temp->next);
    temp->next=NULL;
}
void deletionatposition(struct Node** head,int position){
    if(*head==NULL){
        printf("list is empty\n");
        return;
    }
    if(position==0){
        deletionatfirst(head);
        return;
    }
    struct Node* temp=*head;
    for(int i=0;temp!=NULL && i<position-1;i++){
        temp=temp->next;
    }
    if(temp==NULL || temp->next==NULL){
        printf("out of range\n");
        return;
        }
    struct Node* next=temp->next->next;
    free(temp->next);
    temp->next=next;
}
int main(){
    int num,num1,pos,pos1;
    struct Node* head=NULL;
    for(int i=0;i<10;i++){
        printf("enter 1 for insertion at first\n2 for insertion at end\n3 for insertion at specific position\n4 for printing\n5 for deletion at first\n6 for deletion at end\n7 for deletion at specific position:\n");
        scanf("%d",&num);

        switch(num){
            case 1:
                printf("enter the number you want to insert:");
                scanf("%d",&num1);
                insertionatfirst(&head,num1);
                break;
            case 2:
                printf("enter the number you want to insert");
                scanf("%d",&num1);
                insertionatend(&head,num1);
                break;
            case 3:
                printf("enter the position you want to insert at:");
                scanf("%d",&pos);
                printf("enter the number you want to insertL:");
                scanf("%d",&num1);
                insertionatposition(&head,num1,pos);
                break;
            case 4:
                print(head);
                break;
            case 5:
                deletionatfirst(&head);
                break;
            case 6:
                deletionatend(&head);
                break;
            case 7:
                printf("enter the position you want to insert at:");
                scanf("%d",&pos1);
                deletionatposition(&head,pos1);
                break;

      }
    }
    return 0;
}



























